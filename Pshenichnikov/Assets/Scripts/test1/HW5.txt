Изучение структур данных нужно для того, чтобы лучше, быстрее и компактнее хранить и обрабатывать данные. 

Класс List<T>  - подходит для хранения большинства возможный данных.

HashSet<T> - хранит неупорядоченный списокнеповторяющихся данных, выгодно использовать за счет более быстрого выполнения некоторых операций с ним (Contains, Remove, Add)

SortedSet<T> - хранит упорядоченный списокнеповторяющихся данных, выгодно использовать за счет более быстрого выполнения некоторых операций с ним (Contains, Remove, Add)

ObservableCollection<T> - работает как List , но из особых функций позволяет известить внешние объекты о том, что коллекция была изменена.

LinkedList<T>  - работает как List, но Если в простом списке List<T> каждый элемент представляет объект типа T, то в LinkedList<T> каждый узел представляет объект класса LinkedListNode<T>. По этому в нем можно обращаться не только напрямую к объекту, но и к его соседним объектам.

KeyValuePair<TKey, TValue> - структура в которой хряняться значения доступ к которым можно плучить через ключ.

Dictionary<TKey, TValue>  - коллекция в которой хряняться значения доступ к которым можно плучить через ключ.

Queue<T> - очередь, работающая по алгоритму FIFO («первый вошел – первый вышел»), удобно если нужно работать только с первым элементом в очереди, а добавлять элементы в ее конец.

Stack<T> - коллекция, которая использует алгоритм LIFO («последний вошел – первый вышел») удобно если нужно работать только с первым элементом в очереди, и добавлять элементы в ее начало.